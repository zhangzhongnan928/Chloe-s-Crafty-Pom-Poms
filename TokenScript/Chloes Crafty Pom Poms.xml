<ts:token xmlns:ts="http://tokenscript.org/2022/09/tokenscript" xmlns:xml="http://www.w3.org/XML/1998/namespace" xsi:schemaLocation="http://tokenscript.org/2022/09/tokenscript https://www.tokenscript.org/schemas/2022-09/tokenscript.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ethereum="urn:ethereum:constantinople" name="ProductToken">
    <ts:label>
        <ts:plurals xml:lang="en">
            <ts:string quantity="one">
                Chloes Crafty Pom Poms
            </ts:string>
            <ts:string quantity="other">
                Chloes Crafty Pom Poms
            </ts:string>
        </ts:plurals>
    </ts:label>
    <ts:meta>
        <ts:description xml:lang="en">
            Physical Goods Token: More inclusive, further reduces friction in trading physical goods.
        </ts:description>
    </ts:meta>
    <ts:contract interface="erc721" name="ThisToken">
        <ts:address network="11155111">0xA0343dfd68FcD7F18153b8AB87936c5A9C1Da20e</ts:address>
    </ts:contract>
    <ts:contract interface="erc20" name="DVP">
        <ts:address network="11155111">0x84759f034fEa769052B19f9b5bE94678E0426107</ts:address>
    </ts:contract>
    <ts:origins>
        <ts:ethereum contract="ThisToken"/>
    </ts:origins>
    <ts:cards>
        <!-- Transfer NFT Card -->
        <ts:card type="action" name="transfer" buttonClass="primary" origins="ThisToken">
            <ts:label>
                <ts:string xml:lang="en">
                    Transfer Pom Pom
                </ts:string>
            </ts:label>
            <ts:transaction>
                <ethereum:transaction contract="ThisToken" function="transferFrom">
                    <ts:data>
                        <ts:address ref="ownerAddress"/>
                        <ts:address ref="to"/>
                        <ts:uint256 ref="tokenId"/>
                    </ts:data>
                </ethereum:transaction>
            </ts:transaction>
            <ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                <p>Transfer your Pom Pom to another address by providing the recipient's address and the Pom Pom ID.</p>
                <input type="text" placeholder="Recipient Address" ref="to"/>
            </ts:view>
        </ts:card>

        <!-- Ship Product Card -->
        <ts:card type="action" name="ship" buttonClass="primary" origins="ThisToken">
            <ts:label>
                <ts:string xml:lang="en">
                    Ship Pom Pom
                </ts:string>
            </ts:label>
            <ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                <p>Enter the physical shipping address and confirm to see the shipping cost.</p>
                <input type="text" id="street1" placeholder="Street Address 1"/>
                <input type="text" id="street2" placeholder="Street Address 2"/>
                <input type="text" id="city" placeholder="City"/>
                <input type="text" id="state" placeholder="State"/>
                <input type="text" id="zip" placeholder="Postal Code"/>
                <input type="text" id="country" placeholder="Country"/>
                <button id="confirm-button" onclick="showShippingCost()">Confirm</button>
                <div id="shipping-cost" style="display: none;">
                    <p>Shipping Cost: <span id="_shippingcost">1.0</span> Token</p> <!-- Fixed cost as 1.0 Token -->
                    <button id="pay-button" onclick="transferToken()">Pay and Ship</button>
                </div>
                <div id="transaction-result"></div>
                <script type="text/javascript">
                var __shippingCost = 0;
                var __addressEntry = "";
                document.addEventListener("DOMContentLoaded", function() {
                    let __shippingCost = 1 * 10 ** 18;
                    let st1 = document.getElementById("street1").value;
                    let st2 = document.getElementById("street2").value;
                    let city = document.getElementById("city").value;
                    let state = document.getElementById("state").value;
                    let zip = document.getElementById("zip").value;
                    let country = document.getElementById("country").value;

                    let __addressEntry = `${st1}, ${st2}, ${city}, ${state}, ${zip}, ${country}`;

                    });
                </script>
            </ts:view>
            <ts:transaction>
                <ethereum:transaction function="deliver" contract="DVP">
                    <ts:data>
                        <ts:address>0xA0343dfd68FcD7F18153b8AB87936c5A9C1Da20e</address>
                        <ts:uint256 ref="tokenId"/>
                        <ts:string ref="__addressEntry"/>
                        <ts:uint256 ref="__shippingCost"/>
                    </ts:data>
                </ethereum:transaction>
            </ts:transaction>
        </ts:card>

        <!-- Refund Product Card -->
        <ts:card type="onboarding" name="purchase" buttonClass="primary" origins="ThisToken">
            <ts:label>
                <ts:string xml:lang="en">
                    Purchase Pom Pom
                </ts:string>
            </ts:label>
            <ts:transaction>
                <ethereum:transaction function="purchaseNFT" contract="DVP">
                    <ts:data>
                        <ts:address>0xA0343dfd68FcD7F18153b8AB87936c5A9C1Da20e</address>
                        <ts:uint256 ref="tokenId"/>
                    </ts:data>
                </ethereum:transaction>
            </ts:transaction>
            <ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                <style type="text/css">
                .token-box {
                    display: flex;
                    align-items: center;
                    border: 1px solid #ccc;
                    padding: 10px;
                    margin: 10px 0;
                    background-color: #f9f9f9;
                }
                .token-icon {
                    width: 50px;
                    height: 50px;
                    margin-right: 20px;
                }
                .token-id,
                .token-price,
                .token-expiry {
                    margin-right: 20px;
                }
                .token-id {
                    font-weight: bold;
                }
                </style>
                <p>Here is a list of available Pom Pom for purchase</p>
                <br></br>
                <div id="purchaselist"/>
                <br></br>
                <p>Select TokenId to purchase</p>
                <input type="text" id="tokenId" placeholder="Token ID"/>
                <script type="text/javascript">
                function createTokenHTML(item) {
                    return `
                    <div class="token-box">
                        <img src="https://ipfs.io/ipfs/QmWbWvbNTqe46A5GoZ3PyDWshFWD9Xe4mpk6Y1Vpso96Yv" alt="Token Icon" class="token-icon">
                        <div class="token-id">TokenID: ${item.tokenId}</div>
                        <div class="token-price">Price: ${item.nftPrice}</div>
                        <div class="token-expiry">Expiry: ${item.expiryBlockTime}</div>
                    </div>
                    `;
                }
                //https://ipfs.io/ipfs/QmWbWvbNTqe46A5GoZ3PyDWshFWD9Xe4mpk6Y1Vpso96Yv
			    const provider = new ethers.JsonRpcProvider(rpcURL, {
			        chainId: chainID,
			        name: 'sepolia'
		        });
                const purchaseCaller = new ethers.Contract('0xaaaaAAAAaaaaaaaaaaaAAAAaaaaAAAAaaaaAAAa7', [
                    "struct NFTEntry { address deliverer; address seller; address tokenContract; uint256 tokenId; uint256 nftPrice; uint256 escrowValue; uint256 entryIndex; uint32 expiryBlockTime; }",
                    "function getCurrentListings(address tokenContract) public view returns (NFTEntry[] memory)"
                ], provider);

                document.addEventListener("DOMContentLoaded", function() {
                    //call function
                    let saleList = null;

                    try {
                        const saleList = await purchaseCaller.getCurrentListings(_currentTokenInstance.contractAddress);
                        console.log("SaleList:", saleList);

                        const container = document.getElementById('purchaselist');
                        var html = '';

                        // Loop through the saleList and log each entry
                        saleList.forEach((entry, index) => {
                            html += createTokenHTML(entry);
                        });

                        container.innerHTML = html;
                    } catch (error) {
                        console.log(`Owner error: ${error}`);
                        return false;
                    }

                    });
                </script>
            </ts:view>
        </ts:card>
        
        <!-- Refund Product Card -->
        <ts:card type="action" name="refund" buttonClass="primary" origins="ThisToken">
            <ts:label>
                <ts:string xml:lang="en">
                    Refund Pom Pom
                </ts:string>
            </ts:label>
            <ts:transaction>
                <ethereum:transaction function="refund" contract="DVP">
                    <ts:data>
                        <ts:address>0xA0343dfd68FcD7F18153b8AB87936c5A9C1Da20e</address>
                        <ts:uint256 ref="tokenId"/>
                    </ts:data>
                </ethereum:transaction>
            </ts:transaction>
            <ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                <p>You can refund your product but only 70% of the original price |Fetch escrow amount|.</p>
                <input type="text" placeholder="Token ID" ref="tokenId"/>
            </ts:view>
        </ts:card>

        <!-- Resell Product Card: this may not be needed -->
        <!--<ts:card type="action" name="resell" buttonClass="primary" origins="ThisToken">
            <ts:label>
                <ts:string xml:lang="en">
                    List Pom Pom on DVP
                </ts:string>
            </ts:label>
            <ts:transaction>
                <ethereum:transaction function="resell" contract="DVP">
                    <ts:data>
                        <ts:uint256 ref="tokenId"/>
                        <ts:uint256 ref="price"/>
                        <ts:uint32 ref="expiration"/>
                    </ts:data>
                </ethereum:transaction>
            </ts:transaction>
            <ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                <p>List or Resell your Pom Pom by setting a price and an expiration date.</p>
                <input type="number" placeholder="Resell Price" ref="price"/>
                <input type="number" placeholder="Expiration (timestamp)" ref="expiration"/>
            </ts:view>
        </ts:card>-->
    </ts:cards>
</ts:token>
