<ts:token xmlns:ethereum="urn:ethereum:constantinople" xmlns:ts="http://tokenscript.org/2024/01/tokenscript" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="PomPom" xsi:schemaLocation="http://tokenscript.org/2024/01/tokenscript https://www.tokenscript.org/schemas/2024-01/tokenscript.xsd">
	<ts:label>
		<ts:plurals xml:lang="en">
			<ts:string quantity="one">PomPom Token</ts:string>
			<ts:string quantity="other">PomPom Tokens</ts:string>
		</ts:plurals>
	</ts:label>
    	<ts:meta>
        <ts:description xml:lang="en">
            Physical Goods Token: More inclusive, further reduces friction in trading physical goods.
        </ts:description>
		<ts:iconUrl xml:lang="en">https://ipfs.io/ipfs/QmWbWvbNTqe46A5GoZ3PyDWshFWD9Xe4mpk6Y1Vpso96Yv</ts:iconUrl>
    </ts:meta>
    <ts:contract interface="erc721" name="Token">
        <ts:address network="11155111">0x63ca42a324D42489FD78510616818b7DeF656e04</ts:address>
    </ts:contract>
    <ts:contract name="DVP">
        <ts:address network="11155111">0xc5D09b165A201113E2f998562C724F2807A27DFe</ts:address>
        <ts:abi>
			
			[
				{
				  "inputs": [
					{
					  "internalType": "address",
					  "name": "tokenContract",
					  "type": "address"
					},
                    {
                      "internalType": "uint256",
					  "name": "tokenId",
					  "type": "uint256"
                    }
				  ],
				  "name": "purchaseNFT",
				  "outputs": [
					
				  ],
				  "stateMutability": "nonpayable",
				  "type": "function"
				}
			]
			
		</ts:abi>
    </ts:contract>
    <ts:origins>
        <ts:ethereum contract="Token"/>
    </ts:origins>
	<ts:cards>
		
        <ts:card buttonClass="primary" name="transfer" origins="Token" type="action">
            <ts:label>
                <ts:string xml:lang="en">
                    Transfer Pom Pom
                </ts:string>
            </ts:label>
            <ts:transaction>
                <ethereum:transaction contract="Token" function="transferFrom">
                    <ts:data>
                        <ts:address ref="ownerAddress"/>
                        <ts:address ref="to"/>
                        <ts:uint256 ref="tokenId"/>
                    </ts:data>
                </ethereum:transaction>
            </ts:transaction>
            <ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                <p>Transfer your Pom Pom to another address by providing the recipient's address and the Pom Pom ID.</p>
                <input id="to" type="text" value="Recipient Address"/>
            </ts:view>
        </ts:card>

        <ts:card buttonClass="primary" name="ship" origins="Token" type="action">
            <ts:label>
                <ts:string xml:lang="en">
                    Ship Pom Pom
                </ts:string>
            </ts:label>
        
            <ts:transaction>
                <ethereum:transaction contract="DVP" function="deliver">
                    <ts:data>
                        <ts:address>0x63ca42a324D42489FD78510616818b7DeF656e04</ts:address>
                        <ts:uint256 ref="tokenId"/>
                        <ts:string ref="addressEntry"/>
                        <ts:uint256 ref="shippingCost"/>
                    </ts:data>
                </ethereum:transaction>
            </ts:transaction>
			<ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
				
            <h2>Enter the physical shipping address and confirm to see the shipping cost.</h2>
<input type="text" id="street1" value="Street Address 1"/>
<input type="text" id="street2" value="Street Address 2"/>
<input type="text" id="city" value="City"/>
<input type="text" id="state" value="State"/>
<input type="text" id="zip" value="Postal Code"/>
<input type="text" id="country" value="Country"/>
<br/><button id="confirm-button" onclick="showShippingCost()">Confirm</button>
<div id="shipping-cost" style="display: none;">
    <p>Shipping Cost: <span id="_shippingcost">1.0</span> $USD</p>
</div>
<div id="transaction-result"></div>
<script type="text/javascript">//&lt;![CDATA[

    function showShippingCost() {
            let countryCode = document.getElementById('country').value.toUpperCase().slice(0, 3);
            let cost = 5;
            const shippingCosts = {
                'USA': 1,
                'CAN': 1.1,
                'MEX': 2,
                'BRA': 2,
                'ARG': 4,
                'UK': 1,
                'FRA': 2,
                'GER': 2,
                'RUS': 10,
                'CHN': 1.2,
                'AUS': 3
            };

            if (shippingCosts[countryCode]) {
                cost = shippingCosts[countryCode];
            } else {
                cost = 5;
            }

            document.getElementById('_shippingcost').innerHTML = cost;
            document.getElementById('shipping-cost').style.display = 'block';

            let _addressEntry = getAddress();
            let _shippingCost = ethers.parseUnits(cost.toString(), 18);

            //populate props
            web3.action.setProps({
			    addressEntry: _addressEntry,
                shippingCost: _shippingCost
		    });
        }

        function getAddress() {
            let st1 = document.getElementById("street1").value;
            let st2 = document.getElementById("street2").value;
            let city = document.getElementById("city").value;
            let state = document.getElementById("state").value;
            let zip = document.getElementById("zip").value;
            let country = document.getElementById("country").value;
            return `${st1}, ${st2}, ${city}, ${state}, ${zip}, ${country}`;
        }


//]]&gt;</script></ts:view>
            
        </ts:card>

        <ts:card buttonClass="primary" name="mint" origins="Token" type="action">
        <ts:label>
            <ts:string xml:lang="en">Mint</ts:string>
        </ts:label>
        <ts:transaction>
                <ethereum:transaction contract="Token" function="safeMint">
                    <ts:data>
                        <ts:uint256>10000</ts:uint256>
                        <ts:string> </ts:string>
                    </ts:data>
                </ethereum:transaction>
            </ts:transaction>
        </ts:card>

        <ts:card buttonClass="primary" name="listForSale" type="action">
            <ts:label>
                <ts:string xml:lang="en">
                    List Pom Pom
                </ts:string>
            </ts:label>

            <ts:transaction>
                <ethereum:transaction contract="DVP" function="listToDVP">
                    <ts:data>
                        <ts:address>0x63ca42a324D42489FD78510616818b7DeF656e04</ts:address>
                        <ts:uint256 ref="tokenId"/>
                        <ts:uint256 ref="tokenPrice"/>
                        <ts:uint32 ref="expiryTime"/>
                    </ts:data>
                </ethereum:transaction>
            </ts:transaction>
			<ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
				
            <h2>List your PomPom for sale</h2> <!-- TODO: Fetch name -->
<br/><br/>
<h3></h3><div id="priceEntry">Price in $US (eg 4.2)</div>
<input type="text" id="price" value=""/>
<br/><br/>
<h3>Expiry timestamp (Unix time seconds) (0 for no expiry)</h3>
<div id="currentTime"></div>
<input type="text" id="expiry" value=""/>
<br/><br/>
<h3>Or, specify offer expiry in hours</h3>
<input type="text" id="hours" value=""/>
<script type="text/javascript">//&lt;![CDATA[


    if (currentTokenInstance.tokenId == 0) {
        document.getElementById('price').style.display = 'none';
        document.getElementById('priceEntry').innerText = "Cannot list Token 0";
        document.getElementById('expiry').style.display = 'none';
        document.getElementById('hours').style.display = 'none';
    }

    function updateTime() {
        const currentTimestamp = Math.floor(Date.now() / 1000);
        document.getElementById('currentTime').innerText = "Current Time: " + currentTimestamp;
    }

    setInterval(updateTime, 1000);
    updateTime();

    function updateSelectedPrice(event) {
        let inputPrice = event.target.value;
        let correctedPrice = ethers.parseUnits(inputPrice, 18);
        web3.action.setProps({
            tokenPrice: correctedPrice
        });
    }

    function updateSelectedTime(event) {
        web3.action.setProps({
            expiryTime: event.target.value
        });
    }

    function updateTimeExpiryHours(event) {
        let expiryHours = event.target.value;
        const currentTimestamp = Math.floor(Date.now() / 1000);
        let newExpiryTimeStamp = currentTimestamp + Number(expiryHours)*60*60;
        web3.action.setProps({
            expiryTime: newExpiryTimeStamp
        });
    }

    document.getElementById('price').addEventListener('input', updateSelectedPrice);
    document.getElementById('expiry').addEventListener('input', updateSelectedTime);
    document.getElementById('hours').addEventListener('input', updateTimeExpiryHours);

//]]&gt;</script></ts:view>
            
        </ts:card>

        <ts:card buttonClass="primary" name="refund" origins="Token" type="action">
            <ts:label>
                <ts:string xml:lang="en">
                    Refund Pom Pom
                </ts:string>
            </ts:label>
            <ts:transaction>
                <ethereum:transaction contract="DVP" function="refund">
                    <ts:data>
                        <ts:address>0x63ca42a324D42489FD78510616818b7DeF656e04</ts:address>
                        <ts:uint256 ref="tokenId"/>
                    </ts:data>
                </ethereum:transaction>
            </ts:transaction>
            <ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                
            <h2>Confirm refund for: </h2>
<div id="name"></div>
<br/>
<div id="refundamount"></div>
<script type="text/javascript">//&lt;![CDATA[

    //fetch token, name and address
    const dvpContract = '0xc5D09b165A201113E2f998562C724F2807A27DFe';
    
    const provider = new ethers.JsonRpcProvider(rpcURL, {
        chainId: Number(chainID),
        name: 'sepolia'
    });

    const purchaseCaller = new ethers.Contract(dvpContract, [
        "function _escrowEntries(bytes32 tokenData) public view returns (tuple(address,address,address,uint256,uint256,uint256,uint256,uint32))"
    ], provider);

        function getEntryHash(tokenContract, tokenId) {
            //const address = getAddress(tokenContract);
            const tokenIdHex = ethers.toBeHex(currentTokenInstance.tokenId, 32);
            const encoded = ethers.concat([tokenContract, tokenIdHex]);
            console.log("ENCODED: " + encoded);
            const hash = ethers.keccak256(encoded);


            // Encode the parameters using abi.encodePacked (which is equivalent to ethers.utils.defaultAbiCoder.encode in packed mode)
            //const encoded = ethers.solidityPack(['address', 'uint256'], [tokenContract, tokenId]);
            // Compute the keccak256 hash of the encoded data
            //const hash = ethers.keccak256(encoded);
            return hash;
        }

    async function getListing() {
        try {
            // Call the contract method
            console.log(currentTokenInstance.tokenId);
            //convert to hash entry
            let entryHash = getEntryHash(currentTokenInstance.contractAddress, currentTokenInstance.tokenId);
            console.log("Entry Hash: " + entryHash);

            //const hexString = ethers.toBeHex(currentTokenInstance.tokenId, 32);
            //console.log(hexString);

            const entry = await purchaseCaller._escrowEntries(entryHash);
            console.log("Entry: " + entry);

            //need escrowValue only
            const JSONEntry = {
                escrowValue: ethers.formatUnits(entry[5], 18)
            }

            return JSONEntry;
        } catch (error) {
            console.error("Error fetching listings:", error);
            return null;
        }
    }

    async function getTokenName(tokenEntry) {
        try {
            const nameCaller = new ethers.Contract(tokenEntry.tokenContract, [
                "function name() public view returns (string)"
            ], provider);

            const entry = await nameCaller.name();
            console.log("Entry: " + entry);
            return entry + " #" + tokenEntry.tokenId;
        } catch (error) {
            console.error("Error fetching listings:", error);
            return null;
        }
    }

    document.addEventListener("DOMContentLoaded", async function() {
        try {
            // First get name from props
            const nameContainer = document.getElementById('name');
            nameContainer.innerHTML = currentTokenInstance.name + " #" + currentTokenInstance.tokenId;

            const refundAmountContainer = document.getElementById('refundamount');
            
            let thisEntry = await getListing();
            console.log("Entry: ", thisEntry);
            
            refundAmountContainer.innerHTML = "Amount to be refunded: $US " + thisEntry.escrowValue;
        } catch (error) {
            console.log(`Owner error: ${error}`);
            return false;
        }

        });

//]]&gt;</script></ts:view>
        </ts:card>

        <ts:card buttonClass="primary" name="purchase" type="onboarding">
            <ts:label>
                <ts:string xml:lang="en">
                    Purchase Pom Pom
                </ts:string>
            </ts:label>
        
            <ts:transaction>
                <ethereum:transaction contract="DVP" function="purchaseNFT">
                    <ts:data>
                        <ts:address>0x63ca42a324D42489FD78510616818b7DeF656e04</ts:address>
                        <ts:uint256 ref="purchaseTokenId"/>
                    </ts:data>
                </ethereum:transaction>
            </ts:transaction>
			<ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
				
            <style type="text/css">/*&lt;![CDATA[*/ 

    .token-box {
        display: flex;
        align-items: center;
        border: 1px solid #ccc;
        padding: 10px;
        margin: 10px 0;
        background-color: #f9f9f9;
    }
    .token-icon {
        width: 50px;
        height: 50px;
        margin-right: 20px;
    }
    .token-id,
    .token-price,
    .token-expiry {
        margin-right: 20px;
    }
    .token-id {
        font-weight: bold;
    }
    
 /*//]]&gt;*/</style>
    
    <h1>Here is a list of available Pom Pom for purchase</h1>
    <br/><br/>
    <div id="noitems" style="display: none;">No Items for sale</div>
    <div id="purchaselist"></div>
    <br/><br/>
    <h2>Select TokenId to purchase</h2>
    <input type="text" id="currentTokenId"/>
    <br/>
    <h3><div id="availableBalance"></div></h3>
    <script type="text/javascript">//&lt;![CDATA[


    function updateSelectedTokenId(event) {
        web3.action.setProps({
			purchaseTokenId: event.target.value
		});
    }

    document.getElementById('currentTokenId').addEventListener('input', updateSelectedTokenId);

    function createTokenHTML(item) {
        return `
        &lt;div class="token-box"&gt;
            &lt;img src="https://ipfs.io/ipfs/QmWbWvbNTqe46A5GoZ3PyDWshFWD9Xe4mpk6Y1Vpso96Yv" alt="Token Icon" class="token-icon"&gt;
            &lt;div class="token-id"&gt;TokenID: ${item.tokenId}&lt;/div&gt;
            &lt;div class="token-price"&gt;Price: ${item.nftPrice}&lt;/div&gt;
            &lt;div class="token-expiry"&gt;Expiry: ${item.expiryBlockTime}&lt;/div&gt;
        &lt;/div&gt;
        `;
    }

    const dvpContract = '0xc5D09b165A201113E2f998562C724F2807A27DFe';
    const ERC20Currency = '0xe5A158a5263e02937010DA8FaBBA3c37554d6fAe';
    
    const provider = new ethers.JsonRpcProvider(rpcURL, {
        chainId: Number(chainID),
        name: 'sepolia'
    });

    const purchaseCaller = new ethers.Contract(dvpContract, [
        "function getCurrentListings(address tokenContract) public view returns (tuple(address,address,address,uint256,uint256,uint256,uint256,uint32)[])"
    ], provider);

    async function getUSDBalance() {
        try {
            const balanceCaller = new ethers.Contract(ERC20Currency, [
                "function balanceOf(address wallet) public view returns (uint256)"
            ], provider);
            const entry = await balanceCaller.balanceOf(currentTokenInstance.ownerAddress);
            //correct to human readable
            return ethers.formatUnits(entry, 18);
        } catch (error) {
            console.error("Error fetching listings:", error);
            return null;
        }
    }

    async function getCurrentListings() {
        try {
            // Call the contract method
            const saleList = await purchaseCaller.getCurrentListings(currentTokenInstance.contractAddress);
            console.log("SaleList: " + saleList);

            // Format the result into JSON
            const saleListJSON = saleList.map(entry =&gt; ({
                deliverer: entry[0],
                seller: entry[1],
                tokenContract: entry[2],
                tokenId: entry[3].toString(), 
                nftPrice: ethers.formatUnits(entry[4], 18) + " $USD",
                escrowValue: entry[5].toString(),
                entryIndex: entry[6].toString(), 
                expiryBlockTime: entry[7].toString() 
            }));

            // Return the JSON object
            return saleListJSON;
        } catch (error) {
            console.error("Error fetching listings:", error);
            return null;
        }
    }

    async function updateUSDBalance() {
        let balance = await getUSDBalance();
        const container = document.getElementById('availableBalance');
        container.innerHTML = "Available Balance: " + balance + " $USD";
    }

    document.addEventListener("DOMContentLoaded", async function() {
        //call function
        let saleList = null;

        try {
            let saleList = await getCurrentListings();
            
            console.log("SaleList:", saleList);

            const container = document.getElementById('purchaselist');
            var html = '';

            if (saleList.length == 0) {
                document.getElementById('noitems').style.display = 'block';
            } else {

                // Loop through the saleList and log each entry
                saleList.forEach((entry, index) =&gt; {
                    if (entry.deliverer != "0x0000000000000000000000000000000000000000") {
                        html += createTokenHTML(entry);
                    }
                });
            }

            container.innerHTML = html;

            await updateUSDBalance();
        } catch (error) {
            console.log(`Owner error: ${error}`);
            return false;
        }

        });
    
//]]&gt;</script></ts:view>
            
        </ts:card>

	</ts:cards>

    <ts:attribute name="purchaseTokenId">
		<ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.27</ts:syntax></ts:type>
		<ts:origins>
			<ts:user-entry as="uint"/>
		</ts:origins>
	</ts:attribute>

    <ts:attribute name="addressEntry">
		<ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.36</ts:syntax></ts:type>
			<ts:origins>
				<ts:user-entry as="address"/>
			</ts:origins>
	</ts:attribute>

    <ts:attribute name="shippingCost">
		<ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.27</ts:syntax></ts:type>
		<ts:origins>
			<ts:user-entry as="uint"/>
		</ts:origins>
	</ts:attribute>      

    <ts:attribute name="tokenPrice">
		<ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.27</ts:syntax></ts:type>
		<ts:origins>
			<ts:user-entry as="uint"/>
		</ts:origins>
	</ts:attribute> 

    <ts:attribute name="expiryTime">
		<ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.27</ts:syntax></ts:type>
		<ts:origins>
			<ts:user-entry as="uint"/>
		</ts:origins>
	</ts:attribute>   

</ts:token>