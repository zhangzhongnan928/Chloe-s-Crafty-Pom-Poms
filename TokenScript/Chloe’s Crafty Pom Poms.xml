<ts:token xmlns:ts="http://tokenscript.org/2022/09/tokenscript" xmlns:xml="http://www.w3.org/XML/1998/namespace" xsi:schemaLocation="http://tokenscript.org/2022/09/tokenscript https://www.tokenscript.org/schemas/2022-09/tokenscript.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ethereum="urn:ethereum:constantinople" name="ProductToken">
    <ts:label>
        <ts:plurals xml:lang="en">
            <ts:string quantity="one">
                Chloe’s Crafty Pom Poms
            </ts:string>
            <ts:string quantity="other">
                Chloe’s Crafty Pom Poms
            </ts:string>
        </ts:plurals>
    </ts:label>
    <ts:meta>
        <ts:description xml:lang="en">
            Physical Goods Token: More inclusive, further reduces friction in trading physical goods.
        </ts:description>
    </ts:meta>
    <ts:contract interface="erc721" name="ThisToken">
        <ts:address network="84532">0xCb53cF1bEc34A732D06BD4312E1b04D2479E45C7</ts:address>
    </ts:contract>
    <ts:origins>
        <ts:ethereum contract="ThisToken"/>
    </ts:origins>
    <ts:cards>
        <!-- Transfer NFT Card -->
        <ts:card type="action" name="transfer" buttonClass="primary" origins="ThisToken">
            <ts:label>
                <ts:string xml:lang="en">
                    Transfer Pom Pom
                </ts:string>
            </ts:label>
            <ts:transaction>
                <ethereum:transaction function="transferFrom" contract="ThisToken">
                    <ts:data>
                        <ts:ethereumAddress ref="to"/>
                        <ts:uint256 ref="tokenId"/>
                    </ts:data>
                </ethereum:transaction>
            </ts:transaction>
            <ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                <p>Transfer your Pom Pom to another address by providing the recipient's address and the Pom Pom ID.</p>
                <input type="text" placeholder="Recipient Address" ref="to"/>
                <input type="text" placeholder="Token ID" ref="tokenId"/>
            </ts:view>
        </ts:card>

        <!-- Ship Product Card -->
        <ts:card type="action" name="ship" buttonClass="primary" origins="ThisToken">
            <ts:label>
                <ts:string xml:lang="en">
                    Ship Pom Pom
                </ts:string>
            </ts:label>
            <ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                <p>Enter the physical shipping address and confirm to see the shipping cost.</p>
                <input type="text" id="street1" placeholder="Street Address 1"/>
                <input type="text" id="street2" placeholder="Street Address 2"/>
                <input type="text" id="city" placeholder="City"/>
                <input type="text" id="state" placeholder="State"/>
                <input type="text" id="zip" placeholder="Postal Code"/>
                <input type="text" id="country" placeholder="Country"/>
                <button id="confirm-button" onclick="showShippingCost()">Confirm</button>
                <div id="shipping-cost" style="display: none;">
                    <p>Shipping Cost: <span id="cost">1.0</span> Token</p> <!-- Fixed cost as 1.0 Token -->
                    <button id="pay-button" onclick="transferToken()">Pay and Ship</button>
                </div>
                <div id="transaction-result"></div>
                <script type="text/javascript">
                    let tokenContract;

                    async function initWeb3() {
                        if (typeof window.ethereum !== 'undefined') {
                            ethereum.autoRefreshOnNetworkChange = false;
                            const accounts = await ethereum.request({ method: 'eth_requestAccounts' });
                            window.web3 = new Web3(ethereum);
                            const tokenContractAddress = "0xdd10950083BfE4f812C2218717C8Ae665294429D";
                            const tokenABI = [
                                {
                                    "constant": true,
                                    "inputs": [],
                                    "name": "name",
                                    "outputs": [{"name": "", "type": "string"}],
                                    "type": "function"
                                },
                                {
                                    "constant": false,
                                    "inputs": [{"name": "_to", "type": "address"}, {"name": "_value", "type": "uint256"}],
                                    "name": "transfer",
                                    "outputs": [{"name": "", "type": "bool"}],
                                    "type": "function"
                                }
                            ];
                            tokenContract = new web3.eth.Contract(tokenABI, tokenContractAddress, { from: accounts[0] });
                        } else {
                            alert("Please install MetaMask to use this feature");
                        }
                    }

                    function showShippingCost() {
                        const street1 = document.getElementById('street1').value;
                        const street2 = document.getElementById('street2').value;
                        const city = document.getElementById('city').value;
                        const state = document.getElementById('state').value;
                        const zip = document.getElementById('zip').value;
                        const country = document.getElementById('country').value;

                        if (!street1 || !city || !state || !zip || !country) {
                            alert('Please fill in all the required address fields.');
                            return;
                        }

                        const shippingCostToken = 1.0; // 固定运费

                        document.getElementById('cost').innerText = shippingCostToken.toFixed(1);
                        document.getElementById('shipping-cost').style.display = 'block';
                    }

                    async function transferToken() {
                        const to = "0x4FAe779c2101B3D8cF8BA4365f19d772eF678EB7";
                        
                        try {
                            const result = await tokenContract.methods.transfer(to, web3.utils.toWei("1.0", "ether")).send();
                            document.getElementById('transaction-result').innerText = `Transaction successful! Hash: ${result.transactionHash}`;
                        } catch (error) {
                            document.getElementById('transaction-result').innerText = `Error: ${error.message}`;
                        }
                    }

                    window.addEventListener('load', async () => {
                        await initWeb3();
                    });
                </script>
            </ts:view>
        </ts:card>
        
        <!-- Refund Product Card -->
        <ts:card type="action" name="refund" buttonClass="primary" origins="ThisToken">
            <ts:label>
                <ts:string xml:lang="en">
                    Refund Pom Pom
                </ts:string>
            </ts:label>
            <ts:transaction>
                <ethereum:transaction function="refund" contract="ThisToken">
                    <ts:data>
                        <ts:uint256 ref="tokenId"/>
                    </ts:data>
                </ethereum:transaction>
            </ts:transaction>
            <ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                <p>You can refund your product but only 70% of the original price, which is 0.07 ETH.</p>
                <input type="text" placeholder="Token ID" ref="tokenId"/>
            </ts:view>
        </ts:card>

        <!-- Resell Product Card -->
        <ts:card type="action" name="resell" buttonClass="primary" origins="ThisToken">
            <ts:label>
                <ts:string xml:lang="en">
                    Resell Pom Pom
                </ts:string>
            </ts:label>
            <ts:transaction>
                <ethereum:transaction function="resell" contract="ThisToken">
                    <ts:data>
                        <ts:uint256 ref="tokenId"/>
                        <ts:uint256 ref="price"/>
                        <ts:uint256 ref="expiration"/>
                    </ts:data>
                </ethereum:transaction>
            </ts:transaction>
            <ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                <p>Resell your Pom Pom by setting a price and an expiration date.</p>
                <input type="text" placeholder="Token ID" ref="tokenId"/>
                <input type="text" placeholder="Resell Price" ref="price"/>
                <input type="text" placeholder="Expiration (timestamp)" ref="expiration"/>
            </ts:view>
        </ts:card>
    </ts:cards>
</ts:token>
