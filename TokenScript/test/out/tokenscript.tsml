<ts:token xmlns:ethereum="urn:ethereum:constantinople" xmlns:ts="http://tokenscript.org/2024/01/tokenscript" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="PomPom" xsi:schemaLocation="http://tokenscript.org/2024/01/tokenscript https://www.tokenscript.org/schemas/2024-01/tokenscript.xsd">
	<ts:label>
		<ts:plurals xml:lang="en">
			<ts:string quantity="one">PomPom Token</ts:string>
			<ts:string quantity="other">PomPom Tokens</ts:string>
		</ts:plurals>
	</ts:label>
    	<ts:meta>
        <ts:description xml:lang="en">
            Physical Goods Token: More inclusive, further reduces friction in trading physical goods.
        </ts:description>
		<ts:iconUrl xml:lang="en">https://ipfs.io/ipfs/QmWbWvbNTqe46A5GoZ3PyDWshFWD9Xe4mpk6Y1Vpso96Yv</ts:iconUrl>
    </ts:meta>
    <ts:contract interface="erc721" name="Token">
        <ts:address network="11155111">0xA0343dfd68FcD7F18153b8AB87936c5A9C1Da20e</ts:address>
    </ts:contract>
    <ts:contract interface="erc20" name="DVP">
        <ts:address network="11155111">0x84759f034fEa769052B19f9b5bE94678E0426107</ts:address>
    </ts:contract>
    <ts:origins>
        <ts:ethereum contract="Token"/>
    </ts:origins>
	<ts:cards>
		
        <ts:card buttonClass="primary" name="transfer" origins="Token" type="action">
            <ts:label>
                <ts:string xml:lang="en">
                    Transfer Pom Pom
                </ts:string>
            </ts:label>
            <ts:transaction>
                <ethereum:transaction contract="Token" function="transferFrom">
                    <ts:data>
                        <ts:address ref="ownerAddress"/>
                        <ts:address ref="to"/>
                        <ts:uint256 ref="tokenId"/>
                    </ts:data>
                </ethereum:transaction>
            </ts:transaction>
            <ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
                <p>Transfer your Pom Pom to another address by providing the recipient's address and the Pom Pom ID.</p>
                <input id="to" type="text" value="Recipient Address"/>
            </ts:view>
        </ts:card>

        
        <ts:card buttonClass="primary" name="ship" origins="Token" type="action">
            <ts:label>
                <ts:string xml:lang="en">
                    Ship Pom Pom
                </ts:string>
            </ts:label>
            
            
            <ts:transaction>
                <ethereum:transaction contract="DVP" function="deliver">
                    <ts:data>
                        <ts:address>0xA0343dfd68FcD7F18153b8AB87936c5A9C1Da20e</ts:address>
                        <ts:uint256 ref="tokenId"/>
                        <ts:string ref="__addressEntry"/>
                        <ts:uint256 ref="__shippingCost"/>
                    </ts:data>
                </ethereum:transaction>
            </ts:transaction>
        </ts:card>

        <ts:card buttonClass="primary" name="purchase" origins="ThisToken" type="onboarding">
            <ts:label>
                <ts:string xml:lang="en">
                    Purchase Pom Pom
                </ts:string>
            </ts:label>
            <ts:transaction>
                <ethereum:transaction contract="DVP" function="purchaseNFT">
                    <ts:data>
                        <ts:address>0xA0343dfd68FcD7F18153b8AB87936c5A9C1Da20e</ts:address>
                        <ts:uint256 ref="tokenId"/>
                    </ts:data>
                </ethereum:transaction>
            </ts:transaction>
			<ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
				
            <style type="text/css">/*&lt;![CDATA[*/ 

    .token-box {
        display: flex;
        align-items: center;
        border: 1px solid #ccc;
        padding: 10px;
        margin: 10px 0;
        background-color: #f9f9f9;
    }
    .token-icon {
        width: 50px;
        height: 50px;
        margin-right: 20px;
    }
    .token-id,
    .token-price,
    .token-expiry {
        margin-right: 20px;
    }
    .token-id {
        font-weight: bold;
    }
    
 /*//]]&gt;*/</style>
    
    <h1>Here is a list of available Pom Pom for purchase</h1>
    <br/><br/>
    <div id="purchaselist">
    <br/><br/>
    <h2>Select TokenId to purchase</h2>
    <input type="text" id="tokenId" value="Token ID"/>
    <script type="text/javascript">//&lt;![CDATA[

    function createTokenHTML(item) {
        return `
        &lt;div class="token-box"&gt;
            &lt;img src="https://ipfs.io/ipfs/QmWbWvbNTqe46A5GoZ3PyDWshFWD9Xe4mpk6Y1Vpso96Yv" alt="Token Icon" class="token-icon"&gt;
            &lt;div class="token-id"&gt;TokenID: ${item.tokenId}&lt;/div&gt;
            &lt;div class="token-price"&gt;Price: ${item.nftPrice}&lt;/div&gt;
            &lt;div class="token-expiry"&gt;Expiry: ${item.expiryBlockTime}&lt;/div&gt;
        &lt;/div&gt;
        `;
    }
    
    const provider = new ethers.JsonRpcProvider(rpcURL, {
        chainId: chainID,
        name: 'sepolia'
    });
    const purchaseCaller = new ethers.Contract('0x84759f034fEa769052B19f9b5bE94678E0426107', [
        "struct NFTEntry { address deliverer; address seller; address tokenContract; uint256 tokenId; uint256 nftPrice; uint256 escrowValue; uint256 entryIndex; uint32 expiryBlockTime; }",
        "function getCurrentListings(address tokenContract) public view returns (NFTEntry[] memory)"
    ], provider);

    async function getCurrentListings() {
        try {
            // Call the contract method
            const saleList = await purchaseCaller.getCurrentListings(_currentTokenInstance.contractAddress);
            console.log("SaleList:", saleList);

            // Format the result into JSON
            const saleListJSON = saleList.map(entry =&gt; ({
                deliverer: entry.deliverer,
                seller: entry.seller,
                tokenContract: entry.tokenContract,
                tokenId: entry.tokenId.toString(), // Convert BigNumber to string
                nftPrice: entry.nftPrice.toString(), // Convert BigNumber to string
                escrowValue: entry.escrowValue.toString(), // Convert BigNumber to string
                entryIndex: entry.entryIndex.toString(), // Convert BigNumber to string
                expiryBlockTime: entry.expiryBlockTime.toString() // Convert BigNumber to string
            }));

            // Return the JSON object
            return saleListJSON;
        } catch (error) {
            console.error("Error fetching listings:", error);
            return null;
        }
    }

    let jsonData = getCurrentListings(); // Can this be called after the page settles?

    document.addEventListener("DOMContentLoaded", function() {
        //call function
        let saleList = null;

        try {
            //let jsonData = await getCurrentListings();
            
            console.log("SaleList:", saleList);

            const container = document.getElementById('purchaselist');
            var html = '';

            // Loop through the saleList and log each entry
            saleList.forEach((entry, index) =&gt; {
                html += createTokenHTML(entry);
            });

            container.innerHTML = html;
        } catch (error) {
            console.log(`Owner error: ${error}`);
            return false;
        }

        });
    
//]]&gt;</script></div></ts:view>
            
        </ts:card>

	</ts:cards>

</ts:token>