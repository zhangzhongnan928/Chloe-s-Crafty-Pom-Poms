<ts:token xmlns:ethereum="urn:ethereum:constantinople" xmlns:ts="http://tokenscript.org/2024/01/tokenscript" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Shipping-Receipt" xsi:schemaLocation="http://tokenscript.org/2024/01/tokenscript https://www.tokenscript.org/schemas/2024-01/tokenscript.xsd">
	<ts:label>
		<ts:plurals xml:lang="en">
			<ts:string quantity="one">USD Stablecoin</ts:string>
			<ts:string quantity="other">USD Stablecoins</ts:string>
		</ts:plurals>
	</ts:label>
    	<ts:meta>
        <ts:description xml:lang="en">
            Testnet USD Stablecoin Token. This is "monopoly" money with no actual value.
            Exchange rate is 1M USD Stablecoins for 1 Sepolia ETH
        </ts:description>
		<ts:iconUrl xml:lang="en">https://ipfs.io/ipfs/Qmaq1c14o5D4JS1TWJTPsUvD3r8KgL7yA35NDuBKp3DjwH</ts:iconUrl>
    </ts:meta>
    <ts:contract interface="erc20" name="Token">
        <ts:address network="11155111">0xe5A158a5263e02937010DA8FaBBA3c37554d6fAe</ts:address>
    </ts:contract>
    <ts:origins>
        <ts:ethereum contract="Token"/>
    </ts:origins>
	<ts:cards>

    <ts:card buttonClass="primary" name="purchase" type="onboarding">
            <ts:label>
                <ts:string xml:lang="en">
                    Purchase Test USD Stablecoin
                </ts:string>
            </ts:label>
        
            <ts:transaction>
                <ethereum:transaction contract="Token" function="purchase">
                    <ts:data>
                    </ts:data>
                    <ethereum:value ref="purchaseAmount"/>
                </ethereum:transaction>
            </ts:transaction>
			<ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
				
            <h2>Choose amount of USD to purchase.</h2>
<h3>Exchange rate is 1M $USD to 1 Sepolia ETH</h3>
<input type="text" id="amountToBuy"/>
<br/>
<div id="costInSepEth"></div>
<br/>
<div id="availableBalance"></div>
<script type="text/javascript">//&lt;![CDATA[


    function updatePurchaseAmount(event) {
        let inputAmount = Number(event.target.value);
        let amountInEth = inputAmount / 1000000;
        web3.action.setProps({
			purchaseAmount: amountInEth
		});
    }

    const provider = new ethers.JsonRpcProvider(rpcURL, {
        chainId: Number(chainID),
        name: 'sepolia'
    });

    async function getUSDBalance() {
        try {
            const balanceCaller = new ethers.Contract(currentTokenInstance.contractAddress, [
                "function balanceOf(address wallet) public view returns (uint256)"
            ], provider);

            const entry = await balanceCaller.balanceOf(currentTokenInstance.ownerAddress);
            //correct to human readable
            return ethers.formatUnits(entry, 18);
        } catch (error) {
            console.error("Error fetching listings:", error);
            return null;
        }
    }

    async function updateUSDBalance() {
        let balance = await getUSDBalance();
        const container = document.getElementById('availableBalance');
        container.innerHTML = "Available Balance: " + balance + " $USD";
    }

    function updateSelectedAmount(event) {
        let amountInput = event.target.value;
        let amountToSpend = amountInput / 1000000;

        const container = document.getElementById('costInSepEth');
        container.innerHTML = "Amount in Sepolia: " + amountToSpend + " ETH";

        web3.action.setProps({
            purchaseAmount: amountToSpend
        });
    }

    document.getElementById('amountToBuy').addEventListener('input', updatePurchaseAmount);

    document.addEventListener("DOMContentLoaded", async function () {
        //call function
        let saleList = null;

        try {
            await updateUSDBalance();
        } catch (error) {
            console.log(`Owner error: ${error}`);
            return false;
        }

    });

//]]&gt;</script></ts:view>
        </ts:card>

    </ts:cards>

    <ts:attribute name="purchaseAmount">
		<ts:type><ts:syntax>1.3.6.1.4.1.1466.115.121.1.27</ts:syntax></ts:type>
		<ts:origins>
            <ts:user-entry as="e18"/>
		</ts:origins>
	</ts:attribute>
</ts:token>