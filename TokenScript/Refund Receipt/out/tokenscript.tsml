<ts:token xmlns:ethereum="urn:ethereum:constantinople" xmlns:ts="http://tokenscript.org/2024/01/tokenscript" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Refund-Receipt" xsi:schemaLocation="http://tokenscript.org/2024/01/tokenscript https://www.tokenscript.org/schemas/2024-01/tokenscript.xsd">
	<ts:label>
		<ts:plurals xml:lang="en">
			<ts:string quantity="one">Refund Receipt</ts:string>
			<ts:string quantity="other">Refund Receipts</ts:string>
		</ts:plurals>
	</ts:label>
    	<ts:meta>
        <ts:description xml:lang="en">
            This is your refund receipt.
        </ts:description>
		<ts:iconUrl xml:lang="en">https://raw.githubusercontent.com/zhangzhongnan928/Chloe-s-Crafty-Pom-Poms/main/Metadata/Refund%20Receipt%20NFT.jpeg</ts:iconUrl>
    </ts:meta>
    <ts:contract interface="erc721" name="Token">
        <ts:address network="84532">0x7471366d5b567e5045BE1d344A4434E08028DB74</ts:address>
    </ts:contract>
    <ts:origins>
        <ts:ethereum contract="Token"/>
    </ts:origins>
	<ts:cards>

        <ts:card name="info" origins="Token" type="token">
            <ts:label>
				<ts:string xml:lang="en">Info</ts:string>
			</ts:label>

			<ts:view xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
				
            <h2>Refund receipt of </h2>
<div id="name"></div>
<br/>
<script type="text/javascript">//&lt;![CDATA[

    //fetch token, name and address
    const dvpContract = '0x3BD455f7DD0528De62a233D2aC4a070E4Bc7641d';
    
    const provider = new ethers.JsonRpcProvider(rpcURL, {
        chainId: Number(chainID),
        name: 'base sepolia'
    });

    const purchaseCaller = new ethers.Contract(dvpContract, [
        "function _escrowEntries(bytes32 tokenData) public view returns (tuple(address,address,address,uint256,uint256,uint256,uint256,uint32))"
    ], provider);

    async function getListing() {
        try {
            // Call the contract method
            console.log(currentTokenInstance.tokenId);
            const hexString = ethers.toBeHex(currentTokenInstance.tokenId, 32);
            console.log(hexString);

            const entry = await purchaseCaller._escrowEntries(hexString);
            console.log("Entry: " + entry);

            //need the tokenId and tokenContract
            const JSONEntry = {
                tokenContract: entry[2],
                tokenId: entry[3].toString(),
                escrowValue: ethers.formatUnits(entry[5], 18) + " $USD" //TODO: Retain refund amount
            }

            return JSONEntry;
        } catch (error) {
            console.error("Error fetching listings:", error);
            return null;
        }
    }

    async function getTokenName(tokenEntry) {
        try {
            const nameCaller = new ethers.Contract(tokenEntry.tokenContract, [
                "function name() public view returns (string)"
            ], provider);

            const entry = await nameCaller.name();
            console.log("Entry: " + entry);
            return entry + " #" + tokenEntry.tokenId;
        } catch (error) {
            console.error("Error fetching listings:", error);
            return null;
        }
    }

    document.addEventListener("DOMContentLoaded", async function() {
        try {
            let thisEntry = await getListing();
            console.log("Entry: ", thisEntry);
            let name = await getTokenName(thisEntry);
            const nameContainer = document.getElementById('name');
            nameContainer.innerHTML = name;
        } catch (error) {
            console.log(`Owner error: ${error}`);
            return false;
        }

        });

//]]&gt;</script></ts:view>
            
        </ts:card>

    </ts:cards>

</ts:token>